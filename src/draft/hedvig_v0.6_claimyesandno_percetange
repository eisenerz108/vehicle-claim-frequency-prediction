{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1S4Y1H8Mko1zmDf6CqzVdJamuqH9HLplK","authorship_tag":"ABX9TyMGz1eDcFFYWbm83zdBdKkw"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"Y02PYmJrMOFZ","executionInfo":{"status":"ok","timestamp":1736533105721,"user_tz":-60,"elapsed":8555,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","source":["data = pd.read_csv(\"/content/drive/MyDrive/hedvig/data/processed/n_claims_process.csv\")\n","data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"htzliaSmMUPO","executionInfo":{"status":"ok","timestamp":1736533107124,"user_tz":-60,"elapsed":1407,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"4647a9e0-bb9b-4101-dbea-97c2544f7826"},"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   owner_age owner_gender  geo_zone  vehicle_classification  vehicle_age  \\\n","0          0            M         1                       4           12   \n","1          4            M         3                       6            9   \n","2          5            K         3                       3           18   \n","3          5            K         4                       1           25   \n","4          6            K         2                       1           26   \n","\n","   duration  n_claims  claim_cost  \n","0  0.175342         0           0  \n","1  0.000000         0           0  \n","2  0.454795         0           0  \n","3  0.172603         0           0  \n","4  0.180822         0           0  "],"text/html":["\n","  <div id=\"df-f86a04f0-d877-454c-85e1-9094c34b710f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>owner_age</th>\n","      <th>owner_gender</th>\n","      <th>geo_zone</th>\n","      <th>vehicle_classification</th>\n","      <th>vehicle_age</th>\n","      <th>duration</th>\n","      <th>n_claims</th>\n","      <th>claim_cost</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>M</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>12</td>\n","      <td>0.175342</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4</td>\n","      <td>M</td>\n","      <td>3</td>\n","      <td>6</td>\n","      <td>9</td>\n","      <td>0.000000</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5</td>\n","      <td>K</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>18</td>\n","      <td>0.454795</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5</td>\n","      <td>K</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>25</td>\n","      <td>0.172603</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>6</td>\n","      <td>K</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>26</td>\n","      <td>0.180822</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f86a04f0-d877-454c-85e1-9094c34b710f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f86a04f0-d877-454c-85e1-9094c34b710f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f86a04f0-d877-454c-85e1-9094c34b710f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-46bf2381-c45b-4dd3-9d5e-ef98fc517e8e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-46bf2381-c45b-4dd3-9d5e-ef98fc517e8e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-46bf2381-c45b-4dd3-9d5e-ef98fc517e8e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 64548,\n  \"fields\": [\n    {\n      \"column\": \"owner_age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 0,\n        \"max\": 92,\n        \"num_unique_values\": 85,\n        \"samples\": [\n          83,\n          0,\n          73\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"owner_gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"K\",\n          \"M\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geo_zone\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"vehicle_classification\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          4,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"vehicle_age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 0,\n        \"max\": 99,\n        \"num_unique_values\": 85,\n        \"samples\": [\n          99,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3074238026426817,\n        \"min\": 0.0,\n        \"max\": 31.33973,\n        \"num_unique_values\": 2577,\n        \"samples\": [\n          1.734247,\n          2.70411\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"n_claims\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"claim_cost\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3197,\n        \"min\": 0,\n        \"max\": 95750,\n        \"num_unique_values\": 581,\n        \"samples\": [\n          12707,\n          3609\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["data = data.drop_duplicates()\n","data['owner_gender'] = data['owner_gender'].map({'M': 1, 'K': 0})\n","#data['claim_made'] = data['n_claims'].apply(lambda x: 'Yes' if x > 0 else 'No')\n","data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":310},"id":"egNKt6qThLY8","executionInfo":{"status":"ok","timestamp":1736533107125,"user_tz":-60,"elapsed":7,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"4961aa0e-8be9-45ae-f820-059ac420a09e"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-3-b453e7860e6b>:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data['owner_gender'] = data['owner_gender'].map({'M': 1, 'K': 0})\n"]},{"output_type":"execute_result","data":{"text/plain":["   owner_age  owner_gender  geo_zone  vehicle_classification  vehicle_age  \\\n","0          0             1         1                       4           12   \n","1          4             1         3                       6            9   \n","2          5             0         3                       3           18   \n","3          5             0         4                       1           25   \n","4          6             0         2                       1           26   \n","\n","   duration  n_claims  claim_cost  \n","0  0.175342         0           0  \n","1  0.000000         0           0  \n","2  0.454795         0           0  \n","3  0.172603         0           0  \n","4  0.180822         0           0  "],"text/html":["\n","  <div id=\"df-c560b999-9fe6-4441-b2d2-2487f3091248\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>owner_age</th>\n","      <th>owner_gender</th>\n","      <th>geo_zone</th>\n","      <th>vehicle_classification</th>\n","      <th>vehicle_age</th>\n","      <th>duration</th>\n","      <th>n_claims</th>\n","      <th>claim_cost</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>12</td>\n","      <td>0.175342</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>6</td>\n","      <td>9</td>\n","      <td>0.000000</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>18</td>\n","      <td>0.454795</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>25</td>\n","      <td>0.172603</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>26</td>\n","      <td>0.180822</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c560b999-9fe6-4441-b2d2-2487f3091248')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c560b999-9fe6-4441-b2d2-2487f3091248 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c560b999-9fe6-4441-b2d2-2487f3091248');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-93afb09c-e0eb-475b-a299-ba7c4b713776\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-93afb09c-e0eb-475b-a299-ba7c4b713776')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-93afb09c-e0eb-475b-a299-ba7c4b713776 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 63350,\n  \"fields\": [\n    {\n      \"column\": \"owner_age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 0,\n        \"max\": 92,\n        \"num_unique_values\": 85,\n        \"samples\": [\n          83,\n          0,\n          73\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"owner_gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geo_zone\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"vehicle_classification\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          4,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"vehicle_age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 0,\n        \"max\": 99,\n        \"num_unique_values\": 85,\n        \"samples\": [\n          99,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3187110861497364,\n        \"min\": 0.0,\n        \"max\": 31.33973,\n        \"num_unique_values\": 2577,\n        \"samples\": [\n          1.734247,\n          2.70411\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"n_claims\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"claim_cost\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3227,\n        \"min\": 0,\n        \"max\": 95750,\n        \"num_unique_values\": 581,\n        \"samples\": [\n          12707,\n          3609\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["zone_claim_distribution = data.groupby(['geo_zone', 'claim_made']).size().unstack(fill_value=0)\n","zone_claim_distribution['Total'] = zone_claim_distribution.sum(axis=1)\n","zone_claim_distribution['Yes%'] = (zone_claim_distribution['Yes'] / zone_claim_distribution['Total']) * 100\n","zone_claim_distribution['No%'] = (zone_claim_distribution['No'] / zone_claim_distribution['Total']) * 100\n","zone_claim_distribution.head(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"rPXvIbsglCFY","executionInfo":{"status":"ok","timestamp":1736519341333,"user_tz":-60,"elapsed":424,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"25d7d598-d5cf-4471-ef10-fe1f710fe1f5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["claim_made     No  Yes  Total      Yes%        No%\n","geo_zone                                          \n","1            8293  173   8466  2.043468  97.956532\n","2           11425  162  11587  1.398119  98.601881\n","3           12341  118  12459  0.947107  99.052893\n","4           24088  190  24278  0.782602  99.217398\n","5            2338    9   2347  0.383468  99.616532\n","6            3826   17   3843  0.442363  99.557637\n","7             369    1    370  0.270270  99.729730"],"text/html":["\n","  <div id=\"df-b356c747-0ccd-41b6-a8ba-e9dea7679efb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>claim_made</th>\n","      <th>No</th>\n","      <th>Yes</th>\n","      <th>Total</th>\n","      <th>Yes%</th>\n","      <th>No%</th>\n","    </tr>\n","    <tr>\n","      <th>geo_zone</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>8293</td>\n","      <td>173</td>\n","      <td>8466</td>\n","      <td>2.043468</td>\n","      <td>97.956532</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>11425</td>\n","      <td>162</td>\n","      <td>11587</td>\n","      <td>1.398119</td>\n","      <td>98.601881</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>12341</td>\n","      <td>118</td>\n","      <td>12459</td>\n","      <td>0.947107</td>\n","      <td>99.052893</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>24088</td>\n","      <td>190</td>\n","      <td>24278</td>\n","      <td>0.782602</td>\n","      <td>99.217398</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>2338</td>\n","      <td>9</td>\n","      <td>2347</td>\n","      <td>0.383468</td>\n","      <td>99.616532</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>3826</td>\n","      <td>17</td>\n","      <td>3843</td>\n","      <td>0.442363</td>\n","      <td>99.557637</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>369</td>\n","      <td>1</td>\n","      <td>370</td>\n","      <td>0.270270</td>\n","      <td>99.729730</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b356c747-0ccd-41b6-a8ba-e9dea7679efb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b356c747-0ccd-41b6-a8ba-e9dea7679efb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b356c747-0ccd-41b6-a8ba-e9dea7679efb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d588a417-f67c-4888-a720-6dd1b85365d7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d588a417-f67c-4888-a720-6dd1b85365d7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d588a417-f67c-4888-a720-6dd1b85365d7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"zone_claim_distribution","summary":"{\n  \"name\": \"zone_claim_distribution\",\n  \"rows\": 7,\n  \"fields\": [\n    {\n      \"column\": \"geo_zone\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          2,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8070,\n        \"min\": 369,\n        \"max\": 24088,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          8293,\n          11425,\n          3826\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 84,\n        \"min\": 1,\n        \"max\": 190,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          173,\n          162,\n          17\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8141,\n        \"min\": 370,\n        \"max\": 24278,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          8466,\n          11587,\n          3843\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Yes%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6382642039289388,\n        \"min\": 0.2702702702702703,\n        \"max\": 2.043467989605481,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          2.043467989605481,\n          1.3981185811685508,\n          0.44236273744470467\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6382642039289417,\n        \"min\": 97.95653201039451,\n        \"max\": 99.72972972972973,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          97.95653201039451,\n          98.60188141883145,\n          99.5576372625553\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["onwer_gender_distribution = data.groupby(['owner_gender', 'claim_made']).size().unstack(fill_value=0)\n","onwer_gender_distribution['Total'] = onwer_gender_distribution.sum(axis=1)\n","onwer_gender_distribution['Yes%'] = (onwer_gender_distribution['Yes'] / onwer_gender_distribution['Total']) * 100\n","onwer_gender_distribution['No%'] = (onwer_gender_distribution['No'] / onwer_gender_distribution['Total']) * 100\n","onwer_gender_distribution.head(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"UX111xONnlE9","executionInfo":{"status":"ok","timestamp":1736519469109,"user_tz":-60,"elapsed":227,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"9118ffc2-78e8-44da-893a-8196ae2fa61e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["claim_made       No  Yes  Total      Yes%        No%\n","owner_gender                                        \n","0              9701   60   9761  0.614691  99.385309\n","1             52979  610  53589  1.138293  98.861707"],"text/html":["\n","  <div id=\"df-339dd8e2-b6f2-4f2a-b843-be643be34c90\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>claim_made</th>\n","      <th>No</th>\n","      <th>Yes</th>\n","      <th>Total</th>\n","      <th>Yes%</th>\n","      <th>No%</th>\n","    </tr>\n","    <tr>\n","      <th>owner_gender</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>9701</td>\n","      <td>60</td>\n","      <td>9761</td>\n","      <td>0.614691</td>\n","      <td>99.385309</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>52979</td>\n","      <td>610</td>\n","      <td>53589</td>\n","      <td>1.138293</td>\n","      <td>98.861707</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-339dd8e2-b6f2-4f2a-b843-be643be34c90')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-339dd8e2-b6f2-4f2a-b843-be643be34c90 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-339dd8e2-b6f2-4f2a-b843-be643be34c90');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c862f39b-0817-4b4f-8b36-b96d24ad0720\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c862f39b-0817-4b4f-8b36-b96d24ad0720')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c862f39b-0817-4b4f-8b36-b96d24ad0720 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"onwer_gender_distribution","summary":"{\n  \"name\": \"onwer_gender_distribution\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"owner_gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30602,\n        \"min\": 9701,\n        \"max\": 52979,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          52979,\n          9701\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 388,\n        \"min\": 60,\n        \"max\": 610,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          610,\n          60\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30991,\n        \"min\": 9761,\n        \"max\": 53589,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          53589,\n          9761\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Yes%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.37024265830839365,\n        \"min\": 0.6146911177133491,\n        \"max\": 1.138293306462147,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.138293306462147,\n          0.6146911177133491\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3702426583083926,\n        \"min\": 98.86170669353785,\n        \"max\": 99.38530888228665,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          98.86170669353785,\n          99.38530888228665\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["vehicle_classification_distribution = data.groupby(['vehicle_classification', 'claim_made']).size().unstack(fill_value=0)\n","vehicle_classification_distribution['Total'] = vehicle_classification_distribution.sum(axis=1)\n","vehicle_classification_distribution['Yes%'] = (vehicle_classification_distribution['Yes'] / vehicle_classification_distribution['Total']) * 100\n","vehicle_classification_distribution['No%'] = (vehicle_classification_distribution['No'] / vehicle_classification_distribution['Total']) * 100\n","vehicle_classification_distribution.head(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"8MJEg07Bn9Py","executionInfo":{"status":"ok","timestamp":1736519610075,"user_tz":-60,"elapsed":229,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"d6fb85d0-2c89-436d-fcff-170666ac879d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["claim_made                 No  Yes  Total      Yes%        No%\n","vehicle_classification                                        \n","1                        6853   45   6898  0.652363  99.347637\n","2                        5059   57   5116  1.114152  98.885848\n","3                       18295  158  18453  0.856229  99.143771\n","4                       12022   93  12115  0.767643  99.232357\n","5                       11516  144  11660  1.234991  98.765009\n","6                        8165  168   8333  2.016081  97.983919\n","7                         770    5    775  0.645161  99.354839"],"text/html":["\n","  <div id=\"df-30a6472d-2125-490a-bdcc-d9aeb2d40652\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>claim_made</th>\n","      <th>No</th>\n","      <th>Yes</th>\n","      <th>Total</th>\n","      <th>Yes%</th>\n","      <th>No%</th>\n","    </tr>\n","    <tr>\n","      <th>vehicle_classification</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>6853</td>\n","      <td>45</td>\n","      <td>6898</td>\n","      <td>0.652363</td>\n","      <td>99.347637</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5059</td>\n","      <td>57</td>\n","      <td>5116</td>\n","      <td>1.114152</td>\n","      <td>98.885848</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>18295</td>\n","      <td>158</td>\n","      <td>18453</td>\n","      <td>0.856229</td>\n","      <td>99.143771</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>12022</td>\n","      <td>93</td>\n","      <td>12115</td>\n","      <td>0.767643</td>\n","      <td>99.232357</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>11516</td>\n","      <td>144</td>\n","      <td>11660</td>\n","      <td>1.234991</td>\n","      <td>98.765009</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>8165</td>\n","      <td>168</td>\n","      <td>8333</td>\n","      <td>2.016081</td>\n","      <td>97.983919</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>770</td>\n","      <td>5</td>\n","      <td>775</td>\n","      <td>0.645161</td>\n","      <td>99.354839</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-30a6472d-2125-490a-bdcc-d9aeb2d40652')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-30a6472d-2125-490a-bdcc-d9aeb2d40652 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-30a6472d-2125-490a-bdcc-d9aeb2d40652');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-2db1e556-b6a2-47de-8a24-b2753d596bc9\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2db1e556-b6a2-47de-8a24-b2753d596bc9')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-2db1e556-b6a2-47de-8a24-b2753d596bc9 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"vehicle_classification_distribution","summary":"{\n  \"name\": \"vehicle_classification_distribution\",\n  \"rows\": 7,\n  \"fields\": [\n    {\n      \"column\": \"vehicle_classification\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          2,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5633,\n        \"min\": 770,\n        \"max\": 18295,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          6853,\n          5059,\n          8165\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62,\n        \"min\": 5,\n        \"max\": 168,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          45,\n          57,\n          168\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5682,\n        \"min\": 775,\n        \"max\": 18453,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          6898,\n          5116,\n          8333\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Yes%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.48482936833668355,\n        \"min\": 0.6451612903225806,\n        \"max\": 2.0160806432257288,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.6523630037692084,\n          1.1141516810007819,\n          2.0160806432257288\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4848293683366828,\n        \"min\": 97.98391935677428,\n        \"max\": 99.35483870967742,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          99.34763699623079,\n          98.88584831899921,\n          97.98391935677428\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["vehicle_age_claim_distribution = data.groupby(['vehicle_age', 'claim_made']).size().unstack(fill_value=0)\n","vehicle_age_claim_distribution['Total'] = vehicle_age_claim_distribution.sum(axis=1)\n","vehicle_age_claim_distribution['Yes%'] = (vehicle_age_claim_distribution['Yes'] / vehicle_age_claim_distribution['Total']) * 100\n","vehicle_age_claim_distribution['No%'] = (vehicle_age_claim_distribution['No'] / vehicle_age_claim_distribution['Total']) * 100\n"],"metadata":{"id":"FzzMUdpHomym"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize=(12, 12))\n","vehicle_age_claim_distribution[['Yes%', 'No%']].plot(kind='bar', stacked=True, figsize=(14, 7), colormap='plasma')\n","plt.title('Claim Percentage by Vehicle Age')\n","plt.xlabel('Vehicle Age')\n","plt.ylabel('Percentage')\n","plt.legend(title='Claim Made')\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":724},"id":"bCTRByJSsPiV","executionInfo":{"status":"ok","timestamp":1736520635455,"user_tz":-60,"elapsed":1489,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"f43c55d1-f484-449f-a802-a1e86fe0b852"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x1200 with 0 Axes>"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["vehicle_age_claim_distribution = data.groupby(['owner_age', 'claim_made']).size().unstack(fill_value=0)\n","vehicle_age_claim_distribution['Total'] = vehicle_age_claim_distribution.sum(axis=1)\n","vehicle_age_claim_distribution['Yes%'] = (vehicle_age_claim_distribution['Yes'] / vehicle_age_claim_distribution['Total']) * 100\n","vehicle_age_claim_distribution['No%'] = (vehicle_age_claim_distribution['No'] / vehicle_age_claim_distribution['Total']) * 100\n"],"metadata":{"id":"zA4f-G9VsP2J"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize=(12, 12))\n","vehicle_age_claim_distribution[['Yes%', 'No%']].plot(kind='bar', stacked=True, figsize=(14, 7), colormap='plasma')\n","plt.title('Claim Percentage by Owner Age')\n","plt.xlabel('Owner Age')\n","plt.ylabel('Percentage')\n","plt.legend(title='Claim Made')\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":724},"executionInfo":{"status":"ok","timestamp":1736521503396,"user_tz":-60,"elapsed":1521,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"c648838d-44a7-42b8-db2b-0e5fab1dccd7","id":"WsaZeegkuxK7"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x1200 with 0 Axes>"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Identify invalid cases where duration is 0 but n_claims > 0\n","invalid_cases = data[(data['duration'] == 0) & (data['n_claims'] > 0)]\n","\n","# Set duration to 1 for these invalid cases\n","data.loc[invalid_cases.index, 'duration'] = 1\n","\n","# Verify the changes\n","print(\"Updated invalid cases:\")\n","print(data.loc[invalid_cases.index])\n"],"metadata":{"id":"8e02d5lku7X-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1736533207415,"user_tz":-60,"elapsed":284,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"21518922-3e90-4867-cb20-7402aa17995e"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Updated invalid cases:\n","       owner_age  owner_gender  geo_zone  vehicle_classification  vehicle_age  \\\n","3430          22             1         4                       6            9   \n","4241          23             1         3                       4           21   \n","15950         31             1         1                       3           14   \n","16118         31             1         2                       2            0   \n","\n","       duration  n_claims  claim_cost  \n","3430        1.0         1       29329  \n","4241        1.0         1       12981  \n","15950       1.0         1       26560  \n","16118       1.0         1       31900  \n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"2bkLfaUJcebp"},"execution_count":null,"outputs":[]}]}