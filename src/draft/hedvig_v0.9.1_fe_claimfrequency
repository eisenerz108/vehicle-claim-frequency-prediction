{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"15UCHhQkf8CmoyuvZvBSBDJeT4Oxm6iyL","authorship_tag":"ABX9TyNwHzuScyAOkiaci9rR8f1/"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223},"id":"R4LJ_7CSuT_J","executionInfo":{"status":"ok","timestamp":1736633620624,"user_tz":-60,"elapsed":1759,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"6424e4e8-bc99-47c0-c058-c0c2fbc6f1e6"},"outputs":[{"output_type":"stream","name":"stdout","text":["(60396, 9)\n"]},{"output_type":"execute_result","data":{"text/plain":["   owner_age  owner_gender  geo_zone  vehicle_classification  vehicle_age  \\\n","0          0             1         1                       4           12   \n","1          5             0         3                       3           18   \n","2          5             0         4                       1           25   \n","3          6             0         2                       1           26   \n","4          9             0         3                       3            8   \n","\n","   duration  n_claims  claim_cost  claim_frequency  \n","0  0.175342         0           0              0.0  \n","1  0.454795         0           0              0.0  \n","2  0.172603         0           0              0.0  \n","3  0.180822         0           0              0.0  \n","4  0.542466         0           0              0.0  "],"text/html":["\n","  <div id=\"df-a378b279-5a75-442e-93e4-bc17674ce5c6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>owner_age</th>\n","      <th>owner_gender</th>\n","      <th>geo_zone</th>\n","      <th>vehicle_classification</th>\n","      <th>vehicle_age</th>\n","      <th>duration</th>\n","      <th>n_claims</th>\n","      <th>claim_cost</th>\n","      <th>claim_frequency</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>12</td>\n","      <td>0.175342</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>18</td>\n","      <td>0.454795</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>25</td>\n","      <td>0.172603</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>26</td>\n","      <td>0.180822</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>9</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>8</td>\n","      <td>0.542466</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a378b279-5a75-442e-93e4-bc17674ce5c6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a378b279-5a75-442e-93e4-bc17674ce5c6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a378b279-5a75-442e-93e4-bc17674ce5c6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a91591ba-65fd-48fb-b62b-b58059657158\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a91591ba-65fd-48fb-b62b-b58059657158')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a91591ba-65fd-48fb-b62b-b58059657158 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 60396,\n  \"fields\": [\n    {\n      \"column\": \"owner_age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 0,\n        \"max\": 92,\n        \"num_unique_values\": 83,\n        \"samples\": [\n          36,\n          0,\n          28\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"owner_gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geo_zone\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"vehicle_classification\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          4,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"vehicle_age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 0,\n        \"max\": 99,\n        \"num_unique_values\": 85,\n        \"samples\": [\n          72,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.068112840965096,\n        \"min\": 0.00274,\n        \"max\": 31.16712,\n        \"num_unique_values\": 2257,\n        \"samples\": [\n          0.364384,\n          0.230137\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"n_claims\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"claim_cost\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3305,\n        \"min\": 0,\n        \"max\": 95750,\n        \"num_unique_values\": 581,\n        \"samples\": [\n          12707,\n          3609\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"claim_frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9717676291694196,\n        \"min\": 0.0,\n        \"max\": 182.5150574922431,\n        \"num_unique_values\": 454,\n        \"samples\": [\n          0.1255158229639482,\n          1.1094223237959997\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":1}],"source":["import pandas as pd\n","data = pd.read_csv('/content/drive/MyDrive/hedvig/data/processed/cleaned_data_claimfrequency.csv')\n","print(data.shape)\n","data.head()"]},{"cell_type":"code","source":["data = data.drop(columns=['n_claims', 'duration', 'claim_cost'])\n","\n","# Verify the remaining columns\n","print(data.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hCZDpmoau0Jy","executionInfo":{"status":"ok","timestamp":1736633620624,"user_tz":-60,"elapsed":5,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"62eb89fe-3680-406f-f658-f01c08b91555"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["(60396, 6)\n"]}]},{"cell_type":"code","source":["data.to_csv('datawithfinalColumns.csv', index=False)"],"metadata":{"id":"Soj6DL43wUX1","executionInfo":{"status":"ok","timestamp":1736633621020,"user_tz":-60,"elapsed":399,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"H8TzcpiQwguw","executionInfo":{"status":"ok","timestamp":1736633621020,"user_tz":-60,"elapsed":5,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"e13facb2-bb1c-43fd-819d-3db20a6eef95"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   owner_age  owner_gender  geo_zone  vehicle_classification  vehicle_age  \\\n","0          0             1         1                       4           12   \n","1          5             0         3                       3           18   \n","2          5             0         4                       1           25   \n","3          6             0         2                       1           26   \n","4          9             0         3                       3            8   \n","\n","   claim_frequency  \n","0              0.0  \n","1              0.0  \n","2              0.0  \n","3              0.0  \n","4              0.0  "],"text/html":["\n","  <div id=\"df-a2ce8309-926c-4308-b02c-8bc8fdcd8067\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>owner_age</th>\n","      <th>owner_gender</th>\n","      <th>geo_zone</th>\n","      <th>vehicle_classification</th>\n","      <th>vehicle_age</th>\n","      <th>claim_frequency</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>12</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>18</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>25</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>26</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>9</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>8</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a2ce8309-926c-4308-b02c-8bc8fdcd8067')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a2ce8309-926c-4308-b02c-8bc8fdcd8067 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a2ce8309-926c-4308-b02c-8bc8fdcd8067');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-670006e1-5751-4844-b4fe-92e2e3f984a0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-670006e1-5751-4844-b4fe-92e2e3f984a0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-670006e1-5751-4844-b4fe-92e2e3f984a0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 60396,\n  \"fields\": [\n    {\n      \"column\": \"owner_age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 0,\n        \"max\": 92,\n        \"num_unique_values\": 83,\n        \"samples\": [\n          36,\n          0,\n          28\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"owner_gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geo_zone\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"vehicle_classification\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          4,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"vehicle_age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 0,\n        \"max\": 99,\n        \"num_unique_values\": 85,\n        \"samples\": [\n          72,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"claim_frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9717676291694196,\n        \"min\": 0.0,\n        \"max\": 182.5150574922431,\n        \"num_unique_values\": 454,\n        \"samples\": [\n          0.1255158229639482,\n          1.1094223237959997\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["data['claim_frequency'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":490},"id":"m8WjMiXvwlrW","executionInfo":{"status":"ok","timestamp":1736633621020,"user_tz":-60,"elapsed":4,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"58b52779-4ef0-4fbb-9549-c2f87fb3a0b7"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["claim_frequency\n","0.000000    59726\n","1.000000       28\n","1.994535        9\n","0.500000        7\n","2.005495        7\n","            ...  \n","0.588710        1\n","1.173633        1\n","8.111089        1\n","0.660036        1\n","1.089552        1\n","Name: count, Length: 454, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>claim_frequency</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0.000000</th>\n","      <td>59726</td>\n","    </tr>\n","    <tr>\n","      <th>1.000000</th>\n","      <td>28</td>\n","    </tr>\n","    <tr>\n","      <th>1.994535</th>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>0.500000</th>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>2.005495</th>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>0.588710</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1.173633</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>8.111089</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>0.660036</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1.089552</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>454 rows × 1 columns</p>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# Boxplot for the original claim_frequency data\n","plt.figure(figsize=(7, 5))\n","sns.boxplot(x=data['claim_frequency'], color='blue')\n","plt.title('Boxplot: Original Claim Frequency')\n","plt.xlabel('Claim Frequency')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"mVa7N8pZ2mmQ","executionInfo":{"status":"ok","timestamp":1736633626870,"user_tz":-60,"elapsed":5854,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"a54c1d4c-ddf2-4da1-dd7e-2416b083ca94"},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 700x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","\n","data['claim_frequency'] = np.log1p(data['claim_frequency'])  # Log transformation"],"metadata":{"id":"nO0L1GqKxbO5","executionInfo":{"status":"ok","timestamp":1736633626870,"user_tz":-60,"elapsed":4,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["data['claim_frequency'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":490},"id":"4omvFuhPxv3g","executionInfo":{"status":"ok","timestamp":1736633626870,"user_tz":-60,"elapsed":4,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"67a64e6d-c0c5-4776-82dd-1b17dfd83654"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["claim_frequency\n","0.000000    59726\n","0.693147       28\n","1.096789        9\n","0.405465        7\n","1.100442        7\n","            ...  \n","0.462922        1\n","0.776400        1\n","2.209492        1\n","0.506840        1\n","0.736950        1\n","Name: count, Length: 454, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>claim_frequency</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0.000000</th>\n","      <td>59726</td>\n","    </tr>\n","    <tr>\n","      <th>0.693147</th>\n","      <td>28</td>\n","    </tr>\n","    <tr>\n","      <th>1.096789</th>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>0.405465</th>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>1.100442</th>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>0.462922</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>0.776400</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2.209492</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>0.506840</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>0.736950</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>454 rows × 1 columns</p>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# Boxplot for the original claim_frequency data\n","plt.figure(figsize=(7, 5))\n","sns.boxplot(x=data['claim_frequency'], color='blue')\n","plt.title('Boxplot: Original Claim Frequency')\n","plt.xlabel('Claim Frequency')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"x0-GOgGfx4s3","executionInfo":{"status":"ok","timestamp":1736633627883,"user_tz":-60,"elapsed":1016,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"87aa2370-cbad-4c45-edc4-da6561dae2d6"},"execution_count":9,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 700x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["data.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"95E4rRuv05Um","executionInfo":{"status":"ok","timestamp":1736633627883,"user_tz":-60,"elapsed":5,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"0f545fad-1a96-4288-92e8-2bb9b45206e1"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          owner_age  owner_gender      geo_zone  vehicle_classification  \\\n","count  60396.000000  60396.000000  60396.000000            60396.000000   \n","mean      42.358683      0.844758      3.213971                3.698324   \n","std       13.016600      0.362138      1.357851                1.522225   \n","min        0.000000      0.000000      1.000000                1.000000   \n","25%       31.000000      1.000000      2.000000                3.000000   \n","50%       44.000000      1.000000      3.000000                4.000000   \n","75%       52.000000      1.000000      4.000000                5.000000   \n","max       92.000000      1.000000      7.000000                7.000000   \n","\n","        vehicle_age  claim_frequency  \n","count  60396.000000     60396.000000  \n","mean      12.680542         0.010719  \n","std        9.667562         0.121856  \n","min        0.000000         0.000000  \n","25%        6.000000         0.000000  \n","50%       12.000000         0.000000  \n","75%       16.000000         0.000000  \n","max       99.000000         5.212297  "],"text/html":["\n","  <div id=\"df-94771ffe-1cbe-4980-8c96-cde964ba7ada\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>owner_age</th>\n","      <th>owner_gender</th>\n","      <th>geo_zone</th>\n","      <th>vehicle_classification</th>\n","      <th>vehicle_age</th>\n","      <th>claim_frequency</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>60396.000000</td>\n","      <td>60396.000000</td>\n","      <td>60396.000000</td>\n","      <td>60396.000000</td>\n","      <td>60396.000000</td>\n","      <td>60396.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>42.358683</td>\n","      <td>0.844758</td>\n","      <td>3.213971</td>\n","      <td>3.698324</td>\n","      <td>12.680542</td>\n","      <td>0.010719</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>13.016600</td>\n","      <td>0.362138</td>\n","      <td>1.357851</td>\n","      <td>1.522225</td>\n","      <td>9.667562</td>\n","      <td>0.121856</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>31.000000</td>\n","      <td>1.000000</td>\n","      <td>2.000000</td>\n","      <td>3.000000</td>\n","      <td>6.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>44.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>4.000000</td>\n","      <td>12.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>52.000000</td>\n","      <td>1.000000</td>\n","      <td>4.000000</td>\n","      <td>5.000000</td>\n","      <td>16.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>92.000000</td>\n","      <td>1.000000</td>\n","      <td>7.000000</td>\n","      <td>7.000000</td>\n","      <td>99.000000</td>\n","      <td>5.212297</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-94771ffe-1cbe-4980-8c96-cde964ba7ada')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-94771ffe-1cbe-4980-8c96-cde964ba7ada button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-94771ffe-1cbe-4980-8c96-cde964ba7ada');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-39051698-4348-4e34-8139-b60c665b5711\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-39051698-4348-4e34-8139-b60c665b5711')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-39051698-4348-4e34-8139-b60c665b5711 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"data\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"owner_age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21339.37018773701,\n        \"min\": 0.0,\n        \"max\": 60396.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          42.35868269421816,\n          44.0,\n          60396.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"owner_gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21352.94759354837,\n        \"min\": 0.0,\n        \"max\": 60396.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.8447579309888072,\n          1.0,\n          0.3621382890898625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geo_zone\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21352.121119332904,\n        \"min\": 1.0,\n        \"max\": 60396.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.213971123915491,\n          3.0,\n          60396.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"vehicle_classification\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21351.93683220645,\n        \"min\": 1.0,\n        \"max\": 60396.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.698324392343864,\n          4.0,\n          60396.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"vehicle_age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21345.38788462027,\n        \"min\": 0.0,\n        \"max\": 60396.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.6805417577323,\n          12.0,\n          60396.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"claim_frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21352.940698719627,\n        \"min\": 0.0,\n        \"max\": 60396.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.010719375454987272,\n          5.212296721306555,\n          0.12185646325703998\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["data['claim_frequency'].skew()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qf8WIKn_1BaF","executionInfo":{"status":"ok","timestamp":1736633627883,"user_tz":-60,"elapsed":4,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"fce9ef63-5628-496b-99d1-259b6fbcaddf"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["15.469803151669009"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","# Highlight the outliers using the IQR method\n","Q1 = data['claim_frequency'].quantile(0.25)\n","Q3 = data['claim_frequency'].quantile(0.9945)\n","IQR = Q3 - Q1\n","lower_bound = Q1 - 1.5 * IQR\n","upper_bound = Q3 + 1.5 * IQR\n","\n","# Filter outliers\n","data_no_outliers = data[(data['claim_frequency'] >= lower_bound) & (data['claim_frequency'] <= upper_bound)]\n","outliers = data[(data['claim_frequency'] < lower_bound) | (data['claim_frequency'] > upper_bound)]\n","\n","# Print outliers\n","print(f\"Number of outliers: {outliers.shape[0]}\")\n","print(outliers)\n","\n","plt.figure(figsize=(10, 6))\n","sns.scatterplot(x=range(len(data)), y=data['claim_frequency'], color='gray', label='All Data')\n","sns.scatterplot(x=outliers.index, y=outliers['claim_frequency'], color='red', label='Outliers')\n","plt.title('Outliers in Claim Frequency')\n","plt.xlabel('Index')\n","plt.ylabel('Claim Frequency')\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"o_53cXwu5ZlW","executionInfo":{"status":"ok","timestamp":1736633631122,"user_tz":-60,"elapsed":3243,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"e4fb6296-4b00-45d2-b12f-630cb65b3f93"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of outliers: 36\n","       owner_age  owner_gender  geo_zone  vehicle_classification  vehicle_age  \\\n","396           17             1         4                       4            1   \n","518           18             1         1                       4            3   \n","908           19             1         1                       1            8   \n","1376          20             1         1                       3           10   \n","1711          20             1         4                       5            6   \n","2742          22             1         2                       4            5   \n","3714          23             1         2                       3            2   \n","3822          23             1         2                       5           11   \n","4175          23             1         4                       3            0   \n","4590          23             1         6                       7            3   \n","4943          24             1         1                       4            6   \n","6960          25             1         3                       6            4   \n","7165          25             1         4                       4            1   \n","7970          26             1         1                       4            3   \n","8062          26             1         1                       6            1   \n","8615          26             1         4                       1            1   \n","9785          27             1         2                       5            4   \n","10171         27             1         4                       2            1   \n","10565         27             1         5                       5           13   \n","11496         28             1         3                       5            0   \n","11602         28             1         4                       1            4   \n","11668         28             1         4                       2           38   \n","13914         30             1         1                       6            0   \n","14229         30             1         3                       4            2   \n","18415         34             1         1                       6            9   \n","22206         38             1         4                       1            1   \n","22826         39             1         1                       5           15   \n","22925         39             1         2                       5            0   \n","27664         42             1         4                       6           10   \n","27835         42             1         6                       4           12   \n","34100         46             1         1                       4            8   \n","40381         49             1         3                       6           10   \n","48688         54             1         3                       3            0   \n","54409         59             1         3                       1           11   \n","57644         64             0         2                       5            4   \n","57724         64             1         2                       3            0   \n","\n","       claim_frequency  \n","396           4.124464  \n","518           2.337856  \n","908           2.867382  \n","1376          4.524494  \n","1711          2.315008  \n","2742          2.609056  \n","3714          2.436120  \n","3822          2.134043  \n","4175          5.212297  \n","4590          2.239732  \n","4943          2.271147  \n","6960          3.624350  \n","7165          2.229525  \n","7970          2.547422  \n","8062          3.842128  \n","8615          2.462603  \n","9785          2.410444  \n","10171         2.209492  \n","10565         2.337856  \n","11496         2.189951  \n","11602         3.232118  \n","11668         2.710609  \n","13914         2.423179  \n","14229         2.134045  \n","18415         3.369957  \n","22206         3.200641  \n","22826         2.271147  \n","22925         2.747273  \n","27664         2.489944  \n","27835         2.361347  \n","34100         2.250069  \n","40381         2.337856  \n","48688         2.668554  \n","54409         2.229525  \n","57644         2.292779  \n","57724         3.170202  \n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["data_no_outliers.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i4zdLgg6576U","executionInfo":{"status":"ok","timestamp":1736633631122,"user_tz":-60,"elapsed":6,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"7aad4a71-d430-4e71-eca4-9e4b256da25d"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(60360, 6)"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["data_no_outliers.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"M888U8dj7LHz","executionInfo":{"status":"ok","timestamp":1736633631122,"user_tz":-60,"elapsed":5,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"c4512c9a-52e4-4fac-d802-b90bffc61f4d"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   owner_age  owner_gender  geo_zone  vehicle_classification  vehicle_age  \\\n","0          0             1         1                       4           12   \n","1          5             0         3                       3           18   \n","2          5             0         4                       1           25   \n","3          6             0         2                       1           26   \n","4          9             0         3                       3            8   \n","\n","   claim_frequency  \n","0              0.0  \n","1              0.0  \n","2              0.0  \n","3              0.0  \n","4              0.0  "],"text/html":["\n","  <div id=\"df-e3c54b46-f83c-45a8-ada6-0aa417033a4a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>owner_age</th>\n","      <th>owner_gender</th>\n","      <th>geo_zone</th>\n","      <th>vehicle_classification</th>\n","      <th>vehicle_age</th>\n","      <th>claim_frequency</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>12</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>18</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>25</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>26</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>9</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>8</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e3c54b46-f83c-45a8-ada6-0aa417033a4a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e3c54b46-f83c-45a8-ada6-0aa417033a4a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e3c54b46-f83c-45a8-ada6-0aa417033a4a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4c00a1e4-289a-4126-b308-a5619d3e99e7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4c00a1e4-289a-4126-b308-a5619d3e99e7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4c00a1e4-289a-4126-b308-a5619d3e99e7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data_no_outliers","summary":"{\n  \"name\": \"data_no_outliers\",\n  \"rows\": 60360,\n  \"fields\": [\n    {\n      \"column\": \"owner_age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 0,\n        \"max\": 92,\n        \"num_unique_values\": 83,\n        \"samples\": [\n          36,\n          0,\n          28\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"owner_gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geo_zone\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"vehicle_classification\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          4,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"vehicle_age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 0,\n        \"max\": 99,\n        \"num_unique_values\": 85,\n        \"samples\": [\n          72,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"claim_frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10044601085510846,\n        \"min\": 0.0,\n        \"max\": 2.076251718458213,\n        \"num_unique_values\": 422,\n        \"samples\": [\n          0.6472208018481557,\n          0.10306758449115852\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["data_no_outliers['claim_frequency'].skew()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l235xH6j7TFO","executionInfo":{"status":"ok","timestamp":1736633631122,"user_tz":-60,"elapsed":4,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"3d99dec4-9f47-49e0-e99a-73966ceb4de5"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["12.782422983285315"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["data_no_outliers.to_csv('data_claimfrequency_done_readyforfeatures.csv', index=False)"],"metadata":{"id":"eBYdMS87EaCE","executionInfo":{"status":"ok","timestamp":1736633631720,"user_tz":-60,"elapsed":322,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestRegressor\n","\n","# Define the feature matrix (X) and target variable (y)\n","X = data_no_outliers.drop(columns=['claim_frequency'])\n","y = data_no_outliers['claim_frequency']\n","\n","# Assign higher weight to non-zero claim frequencies\n","sample_weights = y.apply(lambda x: 10 if x > 0 else 1)  # Adjust 10 to your desired weight\n","\n","# Initialize and fit the RandomForestRegressor\n","model = RandomForestRegressor(n_estimators=100, random_state=42)\n","model.fit(X, y, sample_weight=sample_weights)\n","\n","# Predict on test data\n","predictions = model.predict(X)"],"metadata":{"id":"ybUCYIjb7ewF","executionInfo":{"status":"ok","timestamp":1736625742178,"user_tz":-60,"elapsed":7830,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}}},"execution_count":90,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n","\n","# Calculate metrics\n","mae = mean_absolute_error(y, predictions)\n","mse = mean_squared_error(y, predictions)\n","rmse = np.sqrt(mse)\n","r2 = r2_score(y, predictions)\n","\n","# Print results\n","print(f\"Mean Absolute Error (MAE): {mae}\")\n","print(f\"Mean Squared Error (MSE): {mse}\")\n","print(f\"Root Mean Squared Error (RMSE): {rmse}\")\n","print(f\"R² Score: {r2}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Cio8SET59VMk","executionInfo":{"status":"ok","timestamp":1736625834231,"user_tz":-60,"elapsed":7,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"622a9a0c-ec54-4cc3-b0c4-1df65456b04b"},"execution_count":91,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Absolute Error (MAE): 0.013832776607290992\n","Mean Squared Error (MSE): 0.006216004292207349\n","Root Mean Squared Error (RMSE): 0.0788416405981468\n","R² Score: 0.3706553725308971\n"]}]},{"cell_type":"code","source":["from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n","from sklearn.model_selection import train_test_split\n","import numpy as np\n","\n","# Define the feature matrix (X) and target variable (y)\n","X = data_no_outliers.drop(columns=['claim_frequency'])\n","y = data_no_outliers['claim_frequency']\n","\n","# Split the data into training and test sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Assign weights: Higher weight for non-zero values of claim_frequency\n","sample_weights = y_train.apply(lambda x: 2 if x > 0 else 1)  # Adjust 10 to desired weight\n","\n","# Initialize the Linear Regression model\n","linear_model = LinearRegression()\n","\n","# Fit the model with sample weights\n","linear_model.fit(X_train, y_train, sample_weight=sample_weights)\n","\n","# Make predictions on the test data\n","y_pred = linear_model.predict(X_test)\n","\n","# Calculate metrics\n","mae = mean_absolute_error(y_test, y_pred)\n","mse = mean_squared_error(y_test, y_pred)\n","rmse = np.sqrt(mse)\n","r2 = r2_score(y_test, y_pred)\n","\n","# Print metrics\n","print(f\"Mean Absolute Error (MAE): {mae}\")\n","print(f\"Mean Squared Error (MSE): {mse}\")\n","print(f\"Root Mean Squared Error (RMSE): {rmse}\")\n","print(f\"R² Score: {r2}\")\n","\n","# Optional: Print model coefficients and intercept\n","print(\"Model Coefficients:\", linear_model.coef_)\n","print(\"Model Intercept:\", linear_model.intercept_)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RyMZRSxcD-aZ","executionInfo":{"status":"ok","timestamp":1736633683366,"user_tz":-60,"elapsed":285,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"8aa87b76-f854-4865-d805-67491694af06"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Absolute Error (MAE): 0.02911541437780055\n","Mean Squared Error (MSE): 0.010616491527740147\n","Root Mean Squared Error (RMSE): 0.1030363602217205\n","R² Score: -0.010171228386454123\n","Model Coefficients: [-0.00078524  0.01191529 -0.00661646  0.00160611 -0.00074556]\n","Model Intercept: 0.06584665706437141\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","\n","# Extract feature names\n","feature_names = X.columns\n","\n","# Get coefficients from the trained model\n","coefficients = linear_model.coef_\n","\n","# Create a DataFrame for better visualization\n","importance_df = pd.DataFrame({\n","    'Feature': feature_names,\n","    'Coefficient': coefficients,\n","    'Absolute_Coefficient': np.abs(coefficients)\n","})\n","\n","# Sort by absolute value of coefficients\n","importance_df = importance_df.sort_values(by='Absolute_Coefficient', ascending=False)\n","\n","# Display feature importance\n","print(\"Feature Importance:\")\n","print(importance_df)\n","\n","# Optional: Plot the top features\n","import matplotlib.pyplot as plt\n","\n","plt.figure(figsize=(10, 6))\n","plt.barh(importance_df['Feature'], importance_df['Absolute_Coefficient'])\n","plt.xlabel('Absolute Coefficient Value')\n","plt.ylabel('Feature')\n","plt.title('Feature Importance')\n","plt.gca().invert_yaxis()  # Invert y-axis to show the largest feature on top\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":685},"id":"KVSzVLAkFbai","executionInfo":{"status":"ok","timestamp":1736633747214,"user_tz":-60,"elapsed":489,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"7e2951d6-fc00-4f42-a19c-cb3781339083"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Feature Importance:\n","                  Feature  Coefficient  Absolute_Coefficient\n","1            owner_gender     0.011915              0.011915\n","2                geo_zone    -0.006616              0.006616\n","3  vehicle_classification     0.001606              0.001606\n","0               owner_age    -0.000785              0.000785\n","4             vehicle_age    -0.000746              0.000746\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.figure(figsize=(10, 6))\n","plt.scatter(data['owner_gender'], data['claim_frequency'], alpha=0.5, edgecolor='k')\n","plt.title(\"Scatter Plot: Owner Gender vs. Claim Frequency\", fontsize=14)\n","plt.xlabel(\"Owner Gender\", fontsize=12)\n","plt.ylabel(\"Claim Frequency\", fontsize=12)\n","plt.grid(alpha=0.3)\n","plt.show()"],"metadata":{"id":"tHJm8hZubxt6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["mean_claim_frequency = data.groupby('owner_gender')['claim_frequency'].mean()\n","\n","# Display the results\n","print(\"Mean claim frequency by owner gender:\")\n","print(mean_claim_frequency)"],"metadata":{"id":"_FQSr-YgQVlp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize=(10, 6))\n","plt.scatter(data['geo_zone'], data['claim_frequency'], alpha=0.5, edgecolor='k')\n","plt.title(\"Scatter Plot: Zone vs Claim Frequency\", fontsize=14)\n","plt.xlabel(\"Zone\", fontsize=12)\n","plt.ylabel(\"Claim Frequency\", fontsize=12)\n","plt.grid(alpha=0.3)\n","plt.show()"],"metadata":{"id":"Ypd0zAVLQlID"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"LCvVZ6oVQmMV"},"execution_count":null,"outputs":[]}]}