{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"160VpH3jM4W1U4wCWkjk4Wlq4jhuy1I68","authorship_tag":"ABX9TyMDzXijZumN5E87VBJZGB93"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":48,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"Z5OA57ddCm6b","executionInfo":{"status":"ok","timestamp":1736621659400,"user_tz":-60,"elapsed":384,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"06618fc6-96c2-4760-d098-3fa4f507f9f1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   owner_age  owner_gender  geo_zone  vehicle_classification  vehicle_age  \\\n","0          0             1         1                       4           12   \n","1          5             0         3                       3           18   \n","2          5             0         4                       1           25   \n","3          6             0         2                       1           26   \n","4          9             0         3                       3            8   \n","\n","   duration  n_claims  claim_cost  \n","0  0.175342         0           0  \n","1  0.454795         0           0  \n","2  0.172603         0           0  \n","3  0.180822         0           0  \n","4  0.542466         0           0  "],"text/html":["\n","  <div id=\"df-b5a0dd24-4638-4a76-84d7-e9e55d5289ea\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>owner_age</th>\n","      <th>owner_gender</th>\n","      <th>geo_zone</th>\n","      <th>vehicle_classification</th>\n","      <th>vehicle_age</th>\n","      <th>duration</th>\n","      <th>n_claims</th>\n","      <th>claim_cost</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>12</td>\n","      <td>0.175342</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>18</td>\n","      <td>0.454795</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>25</td>\n","      <td>0.172603</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>26</td>\n","      <td>0.180822</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>9</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>8</td>\n","      <td>0.542466</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b5a0dd24-4638-4a76-84d7-e9e55d5289ea')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b5a0dd24-4638-4a76-84d7-e9e55d5289ea button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b5a0dd24-4638-4a76-84d7-e9e55d5289ea');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d917436b-73e6-41ad-8a12-b3e1f100d144\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d917436b-73e6-41ad-8a12-b3e1f100d144')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d917436b-73e6-41ad-8a12-b3e1f100d144 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 61347,\n  \"fields\": [\n    {\n      \"column\": \"owner_age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 0,\n        \"max\": 92,\n        \"num_unique_values\": 83,\n        \"samples\": [\n          36,\n          0,\n          28\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"owner_gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geo_zone\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"vehicle_classification\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          4,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"vehicle_age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 0,\n        \"max\": 99,\n        \"num_unique_values\": 85,\n        \"samples\": [\n          72,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3270351025658413,\n        \"min\": 0.00274,\n        \"max\": 31.33973,\n        \"num_unique_values\": 2576,\n        \"samples\": [\n          1.789041,\n          1.989041\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"n_claims\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"claim_cost\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3279,\n        \"min\": 0,\n        \"max\": 95750,\n        \"num_unique_values\": 581,\n        \"samples\": [\n          12707,\n          3609\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":48}],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","data = pd.read_csv(\"/content/drive/MyDrive/hedvig/data/processed/cleaned_data.csv\")\n","data.head()"]},{"cell_type":"code","source":["import numpy as np\n","\n","print(data.shape[0])\n","\n","# Detect anomalies where vehicle_age is less than the floor of duration and n_claims = 0\n","anomalies = data[(data['vehicle_age'] < np.floor(data['duration'])) & (data['n_claims'] == 0)]\n","\n","data = data.drop(anomalies.index)\n","\n","print(data.shape[0])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u9tOCOtYC-NI","executionInfo":{"status":"ok","timestamp":1736621659631,"user_tz":-60,"elapsed":3,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"ce7e20e2-9d88-45b8-c3f7-76e42b0e4511"},"execution_count":49,"outputs":[{"output_type":"stream","name":"stdout","text":["61347\n","60396\n"]}]},{"cell_type":"code","source":["plt.figure(figsize=(10, 5))\n","sns.scatterplot(x=data['n_claims'], y=data['duration'], alpha=0.3, edgecolor='w')\n","plt.title(\"Claims vs Duration\")\n","plt.xlabel(\"N Claims\")\n","plt.ylabel(\"Duration\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"mWv157KoGd4Y","executionInfo":{"status":"ok","timestamp":1736621662004,"user_tz":-60,"elapsed":508,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"4b12e919-ea23-4a8d-b820-53e1806766cb"},"execution_count":50,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 1 Axes>"],"image/png":"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u7tbF198cdHrP/744/s0I7a/IpHIAXW5u+iiiwaXze1kWdbgdUme56mzs1P5fF7HH3/8iJcI/va3v5UkrVixomj8U5/6lCQNuV5t7ty5etvb3jZ4P5FIaNasWUVfNwA4nBCSAGCUicViknRAJ+ue5+nmm2/WkUceKdu2NX78eCUSCT377LPq6enZ6/PD4fCQk/14PK7JkycPuTYmHo+rq6tr8P4Xv/hFdXd366ijjtL8+fP16U9/Ws8+++xeP+bChQs1e/Zs3XHHHYNjd9xxh8aPH68zzjhjcOyrX/2qnnvuOTU3N+vEE0/Uddddd9BO9lOp1AGF0+nTpw87/oMf/EALFiwYvEYrkUjo3nvv3aevxXBee+01maapmTNnFo1PnDhRtbW1eu2114rGp0yZMuQ16urqir5uAHA4ISQBwCgTi8XU1NSk5557bsSv8W//9m9asWKFTjnlFP34xz/Wfffdp/vvv19HH320PM/b6/Mty9qvcd/3B/9+yimnaMOGDfqf//kfzZs3T9///vd17LHH6vvf//5eP+7FF1+sBx98UDt27JDjOLrnnnt00UUXFXV2+4d/+Ae98sor+ta3vqWmpiZ97Wtf09FHH63f/e53e339PdmyZYt6enqKgsfuNnB1XXfY8eG64v34xz/WsmXLdMQRR+i///u/9fvf/17333+/zjjjjH36WuzJvm4wuy9fNwA4nBCSAGAUOuecc7RhwwY9+uijI3r+L3/5S51++un67//+b733ve/VmWeeqcWLF6u7u/vgFrob9fX1uuKKK/TTn/5Umzdv1oIFCwY7te3JxRdfrHw+r//93//V7373OyWTyWEbETQ2Nuqf/umfdPfdd2vjxo0aN26c/vVf//WAav7Rj34kSYMNIqSB2ZbhPme7ztTsyS9/+UvNmDFDd955py699FItWbJEixcvViaTKXrcvgYeaWB/K8/zhixpbG1tVXd3t6ZOnbrPrwUAhyNCEgCMQp/5zGdUU1OjD33oQ2ptbR1yfMOGDfrGN76x2+dbljVkluAXv/iFtm7detBr3VVHR0fR/UgkopkzZw5pTT2cOXPmaP78+brjjjt0xx13qLGxUaeccsrgcdd1hyxRmzBhgpqamvbp9XfngQce0Je+9CVNnz5d73vf+wbHjzjiCL344otqb28fHPvb3/6mP//5z/v82jtncQq/Ho8//viQAFxdXS1J+xRk3/nOd0qSbrnllqLxm266SZJ09tln73N9AHA4Yuc5ABiFjjjiCK1atUoXX3yx5syZo8suu0zz5s1TNpvVX/7yF/3iF7/QsmXLdvv8c845R1/84hd1xRVX6C1veYvWrl2rn/zkJ5oxY0bJa587d65OO+00HXfccaqvr9dTTz2lX/7yl7ryyiv36fkXX3yxrrnmGoXDYX3wgx8cbEAhDVynNXnyZL373e/WwoULFYlE9Mc//lFPPvmkvv71r+/T6//ud7/Tiy++qHw+r9bWVj3wwAO6//77NXXqVN1zzz1Fm+t+4AMf0E033aQlS5bogx/8oNra2vTd735XRx999GCDjb0555xzdOedd+rCCy/U2WefrY0bN+q73/2u5s6dq1QqNfi4qqoqzZ07V3fccYeOOuoo1dfXa968eZo3b96Q11y4cKEuv/xy/ed//qe6u7t16qmn6oknntAPfvADXXDBBTr99NP3qTYAOFwRkgBglDrvvPP07LPP6mtf+5p+9atf6dZbb5Vt21qwYIG+/vWv68Mf/vBun/u5z31OfX19WrVqle644w4de+yxuvfee/XZz3625HV/4hOf0D333KM//OEPchxHU6dO1Q033KBPf/rT+/T8iy++WJ///OfV399f1NVOGpht+ad/+if94Q9/0J133inP8zRz5kx95zvf0cc+9rF9ev1rrrlGkhQKhVRfX6/58+frlltu0RVXXDGkacOcOXP0wx/+UNdcc41WrFihuXPn6kc/+pFWrVqlhx56aJ8+3rJly7R9+3Z973vf03333ae5c+fqxz/+sX7xi18MeY3vf//7+vjHP65PfvKTymazuvbaa4cNSTsfO2PGDN1+++266667NHHiRK1cuVLXXnvtPtUFAIczw+eqTAAAAAAYxDVJAAAAAFCAkAQAAAAABQhJAAAAAFCAkAQAAAAABQhJAAAAAFCAkAQAAAAABcb8Pkme52nbtm2KRqMyDKPc5QAAAAAoE9/31dvbq6ampqLNyHc15kPStm3b1NzcXO4yAAAAAFSIzZs3a/Lkybs9PuZD0s7d0Tdv3qxYLFbmagAAAACUSzKZVHNz82BG2J0xH5J2LrGLxWKEJAAAAAB7vQyHxg0AAAAAUICQBAAAAAAFCEkAAAAAUICQBAAAAAAFCEkAAAAAUICQBAAAAAAFCEkAAAAA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UIGuu+463X333VqzZk25SxkRZpIOgWw2q6efflqLFy8eHDNNU4sXL9ajjz5axsoAjFU9PT2SBk56gb1xXVc/+9nP1NfXp0WLFpW7HFSw5cuX6+yzzy46pwF25+WXX1ZTU5NmzJih973vfdq0aVO5S9pngXIXcDjYsWOHXNdVQ0ND0XhDQ4NefPHFMlUFYKzyPE9XXXWVTj75ZM2bN6/c5aCCrV27VosWLVImk1EkEtFdd92luXPnlrssVKif/exneuaZZ/Tkk0+WuxSMAieddJJuv/12zZo1Sy0tLbr++uv1tre9Tc8995yi0Wi5y9srQhIAjDHLly/Xc889N6rWfqM8Zs2apTVr1qinp0e//OUvdfnll+vhhx8mKGGIzZs365//+Z91//33KxwOl7scjAJLly4d/PuCBQt00kknaerUqfr5z38+Kpb0EpIOgfHjx8uyLLW2thaNt7a2auLEiWWqCsBYdOWVV+o3v/mNHnnkEU2ePLnc5aDChUIhzZw5U5J03HHH6cknn9Q3vvENfe973ytzZag0Tz/9tNra2nTssccOjrmuq0ceeUT/8R//IcdxZFlWGStEpautrdVRRx2l9evXl7uUfcI1SYdAKBTScccdp9WrVw+OeZ6n1atXs/YbwEHh+76uvPJK3XXXXXrggQc0ffr0cpeEUcjzPDmOU+4yUIHe/va3a+3atVqzZs3g7fjjj9f73vc+rVmzhoCEvUqlUtqwYYMaGxvLXco+YSbpEFmxYoUuv/xyHX/88TrxxBN1yy23qK+vT1dccUW5S0MFSqVSRb9p2bhxo9asWaP6+npNmTKljJWhUi1fvlyrVq3Sr371K0WjUW3fvl2SFI/HVVVVVebqUIlWrlyppUuXasqUKert7dWqVav00EMP6b777it3aahA0Wh0yDWONTU1GjduHNc+YlhXX321zj33XE2dOlXbtm3TtddeK8uydMkll5S7tH1CSDpELr74YrW3t+uaa67R9u3bdcwxx+j3v//9kGYOgCQ99dRTOv300wfvr1ixQpJ0+eWX6/bbby9TVahkt956qyTptNNOKxq/7bbbtGzZskNfECpeW1ubLrvsMrW0tCgej2vBggW677779I53vKPcpQEYA7Zs2aJLLrlEHR0dSiQSeutb36rHHntMiUSi3KXtE/ZJAgAAAIACXJMEAAAAAAUISQAAAABQgJAEAAAAAAUISQAAAABQgJAEAAAAAAUISQAAAABQgJAEAAAAAAUISQAAAABQgJAEABhzHnroIRmGoe7u7n1+zmmnnaarrrqqZDUBAEYPQhIA4JBbtmyZDMPQl7/85aLxu+++W4Zh7PX5f/3rX/We97xHDQ0NCofDOvLII/XhD39Yf//730dc05133qkvfelLI34+AGDsICQBAMoiHA7rK1/5irq6uvbreb/5zW/05je/WY7j6Cc/+YnWrVunH//4x4rH4/rCF74w4nrq6+sVjUZH/HwAwNhBSAIAlMXixYs1ceJE3Xjjjfv8nP7+fl1xxRV65zvfqXvuuUeLFy/W9OnTddJJJ+nf//3f9b3vfW/Y53V0dOiSSy7RpEmTVF1drfnz5+unP/1p0WN2XW43bdo03XDDDbrssssUiUQ0depU3XPPPWpvb9f555+vSCSiBQsW6Kmnnhp8zmuvvaZzzz1XdXV1qqmp0dFHH63f/va3+/eJAQCUHSEJAFAWlmXp3/7t3/Stb31LW7Zs2afn3HfffdqxY4c+85nPDHu8trZ22PFMJqPjjjtO9957r5577jl95CMf0aWXXqonnnhijx/v5ptv1sknn6y//vWvOvvss3XppZfqsssu0/vf/34988wzOuKII3TZZZfJ931J0vLly+U4jh555BGtXbtWX/nKVxSJRPbp3wYAqByEJABA2Vx44YU65phjdO211+7T419++WVJ0uzZs/fr40yaNElXX321jjnmGM2YMUMf//jHddZZZ+nnP//5Hp/3zne+U//4j/+oI488Utdcc42SyaROOOEEvec979FRRx2lf/mXf9G6devU2toqSdq0aZNOPvlkzZ8/XzNmzNA555yjU045Zb9qBQCUHyEJAFBWX/nKV/SDH/xA69at2+tjd87Y7C/XdfWlL31J8+fPV319vSKRiO677z5t2rRpj89bsGDB4N8bGhokSfPnzx8y1tbWJkn6xCc+oRtuuEEnn3yyrr32Wj377LMjqhcAUF6EJABAWZ1yyilasmSJVq5cudfHHnXUUZKkF198cb8+xte+9jV94xvf0L/8y7/owQcf1Jo1a7RkyRJls9k9Pi8YDA7+fWfXveHGPM+TJH3oQx/SK6+8oksvvVRr167V8ccfr29961v7VSsAoPwISQCAsvvyl7+sX//613r00Uf3+LgzzzxT48eP11e/+tVhj+9uX6Q///nPOv/88/X+979fCxcu1IwZMw6oXfieNDc366Mf/ajuvPNOfepTn9J//dd/leTjAABKh5AEACi7+fPn633ve5+++c1v7vFxNTU1+v73v697771X5513nv74xz/q1Vdf1VNPPaXPfOYz+uhHPzrs84488kjdf//9+stf/qJ169bpH//xHwevIzqYrrrqKt13333auHGjnnnmGT344IOaM2fOQf84AIDSIiQBACrCF7/4xcFla3ty/vnn6y9/+YuCwaD+z//5P5o9e7YuueQS9fT06IYbbhj2OZ///Od17LHHasmSJTrttNM0ceJEXXDBBQf5XzBw7dPy5cs1Z84cnXXWWTrqqKP0ne9856B/HABAaRn+SK+CBQAAAIAxiJkkAAAAAChASAIAAACAAoQkAAAAAChASAIAAACAAoQkAAAAAChASAIAAACAAoQkAAAAAChASAIAAACAAoQkAAAAAChASAIAAACAAoQkAAAAACjw/wHAUgwPNI28mQAAAABJRU5ErkJggg==\n"},"metadata":{}}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Plot a boxplot for the 'duration' column\n","plt.figure(figsize=(8, 4))\n","plt.boxplot(data['duration'], vert=False, patch_artist=True, boxprops=dict(facecolor=\"lightblue\"))\n","plt.title('Duration Outliers')\n","plt.xlabel('Duration')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":410},"id":"RhUO8GpPJAx6","executionInfo":{"status":"ok","timestamp":1736621665557,"user_tz":-60,"elapsed":228,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"b3f5a0e8-579a-4fa0-9855-0890387e7395"},"execution_count":51,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["data.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q2RaAFOIMVSx","executionInfo":{"status":"ok","timestamp":1736621667282,"user_tz":-60,"elapsed":326,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"4d662c84-9f79-4c42-fbb8-0724cd7efeae"},"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 60396 entries, 0 to 61346\n","Data columns (total 8 columns):\n"," #   Column                  Non-Null Count  Dtype  \n","---  ------                  --------------  -----  \n"," 0   owner_age               60396 non-null  int64  \n"," 1   owner_gender            60396 non-null  int64  \n"," 2   geo_zone                60396 non-null  int64  \n"," 3   vehicle_classification  60396 non-null  int64  \n"," 4   vehicle_age             60396 non-null  int64  \n"," 5   duration                60396 non-null  float64\n"," 6   n_claims                60396 non-null  int64  \n"," 7   claim_cost              60396 non-null  int64  \n","dtypes: float64(1), int64(7)\n","memory usage: 4.1 MB\n"]}]},{"cell_type":"code","source":["data['duration'].describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":335},"id":"Skfo0fYCQDFl","executionInfo":{"status":"ok","timestamp":1736621667491,"user_tz":-60,"elapsed":2,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"009eb74f-0f39-41db-eb5d-6de20f1e1659"},"execution_count":53,"outputs":[{"output_type":"execute_result","data":{"text/plain":["count    60396.000000\n","mean         0.976554\n","std          1.068113\n","min          0.002740\n","25%          0.482192\n","50%          0.841096\n","75%          1.000000\n","max         31.167120\n","Name: duration, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>duration</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>60396.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>0.976554</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>1.068113</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.002740</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>0.482192</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>0.841096</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>31.167120</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":53}]},{"cell_type":"code","source":["data['claim_frequency'] = data['n_claims'] / data['duration']\n","data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"ugtws-wfNbmg","executionInfo":{"status":"ok","timestamp":1736621668968,"user_tz":-60,"elapsed":232,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"14d9dee3-910e-48fb-e23d-00024ce76c6f"},"execution_count":54,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   owner_age  owner_gender  geo_zone  vehicle_classification  vehicle_age  \\\n","0          0             1         1                       4           12   \n","1          5             0         3                       3           18   \n","2          5             0         4                       1           25   \n","3          6             0         2                       1           26   \n","4          9             0         3                       3            8   \n","\n","   duration  n_claims  claim_cost  claim_frequency  \n","0  0.175342         0           0              0.0  \n","1  0.454795         0           0              0.0  \n","2  0.172603         0           0              0.0  \n","3  0.180822         0           0              0.0  \n","4  0.542466         0           0              0.0  "],"text/html":["\n","  <div id=\"df-d846f47f-4848-4d4a-9572-4ecf2f7e76bb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>owner_age</th>\n","      <th>owner_gender</th>\n","      <th>geo_zone</th>\n","      <th>vehicle_classification</th>\n","      <th>vehicle_age</th>\n","      <th>duration</th>\n","      <th>n_claims</th>\n","      <th>claim_cost</th>\n","      <th>claim_frequency</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>12</td>\n","      <td>0.175342</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>18</td>\n","      <td>0.454795</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>25</td>\n","      <td>0.172603</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>26</td>\n","      <td>0.180822</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>9</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>8</td>\n","      <td>0.542466</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d846f47f-4848-4d4a-9572-4ecf2f7e76bb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d846f47f-4848-4d4a-9572-4ecf2f7e76bb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d846f47f-4848-4d4a-9572-4ecf2f7e76bb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-505885d6-17c5-4878-8e24-0a7cb04ff99c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-505885d6-17c5-4878-8e24-0a7cb04ff99c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-505885d6-17c5-4878-8e24-0a7cb04ff99c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 60396,\n  \"fields\": [\n    {\n      \"column\": \"owner_age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 0,\n        \"max\": 92,\n        \"num_unique_values\": 83,\n        \"samples\": [\n          36,\n          0,\n          28\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"owner_gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geo_zone\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"vehicle_classification\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          4,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"vehicle_age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 0,\n        \"max\": 99,\n        \"num_unique_values\": 85,\n        \"samples\": [\n          72,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.068112840965096,\n        \"min\": 0.00274,\n        \"max\": 31.16712,\n        \"num_unique_values\": 2257,\n        \"samples\": [\n          0.364384,\n          0.230137\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"n_claims\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"claim_cost\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3305,\n        \"min\": 0,\n        \"max\": 95750,\n        \"num_unique_values\": 581,\n        \"samples\": [\n          12707,\n          3609\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"claim_frequency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9717676291694196,\n        \"min\": 0.0,\n        \"max\": 182.5150574922431,\n        \"num_unique_values\": 454,\n        \"samples\": [\n          0.12551582296394823,\n          1.1094223237959995\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":54}]},{"cell_type":"code","source":["data.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J6KtHKgnt9Qr","executionInfo":{"status":"ok","timestamp":1736621679600,"user_tz":-60,"elapsed":229,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}},"outputId":"353c605f-9f70-4ab4-c004-110cf6f5aeae"},"execution_count":55,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(60396, 9)"]},"metadata":{},"execution_count":55}]},{"cell_type":"code","source":["data.to_csv('cleaned_data_claimfrequency.csv', index=False)"],"metadata":{"id":"yNtjo2M8OLM2","executionInfo":{"status":"ok","timestamp":1736621691607,"user_tz":-60,"elapsed":742,"user":{"displayName":"Aman Jain","userId":"10587085597819974522"}}},"execution_count":56,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"V3ZJqaHxuA6f"},"execution_count":null,"outputs":[]}]}